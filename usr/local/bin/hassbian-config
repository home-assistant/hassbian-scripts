#!/bin/bash

SUITE_INSTALL_DIR=/opt/hassbian/suites
SUITE_INSTALL_DB=/srv/homeassistant/hassbian/suite-states
SUITE_INSTALL_DB_LOCK=/srv/homeassistant/hassbian/suite-states.lock

function usage {
   echo $0: usage:
   echo
   echo $0 \<command\> \<suite\>
   echo where \<command\> is one of:
   echo     install  - installs a software suite
   echo     show     - shows software suites available
   echo and \<suite\> is the name of a software component to operate on.
   echo
}

function show-suite-info {
   source $SUITE_INSTALL_DIR/install_$1.sh
   $1-show-long-info
}

function get-all-suite-installers {
   echo $(ls $SUITE_INSTALL_DIR/install_*.sh | grep -Po "install_\K(.*)\.sh$" | awk -F. '!/homeassistant/ {print $1}')
}

function show-suites {
   echo List of suites available for installation:
   # inhibit the homeassistant suite from being displayed, to discourage its (re-)installation.
   suites=$(get-all-suite-installers)
   for i in $suites
   do
      echo $i: $(show-suite-info $i)
   done
}

function show-suite-long-info {
   # Shows long info for the suite.
   source $SUITE_INSTALL_DIR/install_$1.sh
   $1-show-short-info
   $1-show-long-info
   $1-show-copyright-info
}

function get-database-lock {
   # Create a file descriptor (we shouldn't have 300 files open already) and use it to lock the database
   exec 300> $SUITE_INSTALL_DB_LOCK
   flock -n 300 || exit 1
}

function release-database-lock {
   # This is how to close a file descriptor.
   exec 300>&-
}

# We cannot eliminate disk writes without a tmpfs
# however, operation is likely so infrequent wear won't matter.
function update-suite-state {
   get-database-lock
   # We are now the "owner" of the lockfile.
   # Truncate or create an empty temporary file
   >| $SUITE_INSTALL_DB.tmp
   while read suite state
   do
      if [ "$suite" == "$1" ]
      then
         echo "$suite $2" >> $SUITE_INSTALL_DB.tmp
      else
         echo "$suite $state" >> $SUITE_INSTALL_DB.tmp
      fi
   done < $SUITE_INSTALL_DB

   # And put the database back where it should be.
   mv $SUITE_INSTALL_DB.tmp $SUITE_INSTALL_DB

   release-database-lock
}

function get-suite-state {
   suitestate="Uninstalled"
   get-database-lock
   while read suite state
   do
      if [ "$suite" == "$1" ]
      then
         suitestate=$state
      fi
   done < $SUITE_INSTALL_DB
   release-database-lock
   echo $suitestate
}

function get-suites-from-db {
   get-database-lock
   while read suite state
   do
      suites=$suites" "$suite
   done < $SUITE_INSTALL_DB
   release-database-lock
   echo $suites
}

function install-suite {
   # Having got here, the installer script exists; source it, then run the installer function.
   update-suite-state "$1" "installing"
   source $SUITE_INSTALL_DIR/install_$1.sh
   if $1-install-package
   then
      update-suite-state "$1" "installed"
   else
      update-suite-state "$1" "failed"
   fi
}

function verify-suite {
   # Check that the suite specified actually exists
   if [ -f "$SUITE_INSTALL_DIR/install_$1.sh" ]
   then
      retval=0 # beware - 0 is true in bash.
   else
      retval=1
   fi
   return $retval
}

function get-suite-state-info {
   # Get the state of one suite (non empty parameter) or all suites (empty parameter)
   if [ "$1" != "" ]
   then
      suiteops=$1
   else
      installed=$(get-suites-from-db)
      available=$(get-all-suite-installers)
      # Now get all unique items from both these env vars.
      suiteops=$(echo "$installed $available" | tr ' ' '\n' | sort -u )
   fi
   # now start the JSON build - I've left spaces in the text to make it clearer.
   json=""
   frag='{ "suites": {'
   first=1
   # One or more space separated suites in $operation, loop round one by one
   for suite in $suiteops
   do
      if [ $first -eq 0 ]
      then
         # If this isn't the first entity we've added, append a comma.
         frag="$frag,"
      fi
      first=0
      suitestate=$(get-suite-state $suite)
      if verify-suite $suite
      then
         suiteinfo=$(show-suite-info $suite)
      else
         suiteinfo="Unavailable information for suite '$suite'"
      fi
      # No good way to do this, so quick-n-dirty:
      json="\"$suite\": { \"state\": \"$suitestate\", \"description\": \"$suiteinfo\" } "
      frag="$frag $json"
   done
   # Finish off the JSON fragment, closing all that we opened above
   json="$frag } }"
   echo $json
}

if [ $# -lt 1 ]
then
   usage
   exit
fi
COMMAND=$1
SUITE=$2


case $COMMAND in
"show")
   if [ "$SUITE" != "" ]
   then
      if verify-suite $SUITE
      then
         show-suite-long-info $SUITE
      else
         echo "suite $SUITE doesn't exist."
      fi
   else
      show-suites
   fi
   ;;
"install")
   if verify-suite $SUITE
   then
      install-suite $SUITE
   else
      echo "suite $SUITE doesn't exist."
   fi
   exit
   ;;
"info")
   if verify-suite $SUITE
   then
      info-suite $SUITE
   else
      echo "suite $SUITE doesn't exist."
   fi
   ;;
"state")
   get-suite-state-info $SUITE
   ;;
*)
   usage
   ;;
esac
