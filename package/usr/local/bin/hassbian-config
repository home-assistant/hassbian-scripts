#!/bin/bash
# The base of hassbian-config, this should only contain source links to the helper scripts and global variables.
# shellcheck disable=SC1091,SC2034

#####################################
#  Locations
#####################################

# Loggfile for 'hassbian-config' operations.
readonly HASSBIAN_LOG_FILE='/tmp/hassbian.log'

# Suite directory for 'hassbian-config'.
readonly HASSBIAN_SUITE_DIR='/opt/hassbian/suites'

# Controll directory for 'hassbian-config'.
readonly HASSBIAN_CONTROL_DIR='/srv/homeassistant/hassbian/control'

# Home Assistant venv directory.
readonly HOME_ASSISTANT_VENV='/srv/homeassistant'

#####################################
#  Runtime flags
#####################################

# Enabled by adding the --accept flag.
declare HASSBIAN_RUNTIME_ACCEPT=false

# Enabled by adding the --debug flag.
declare HASSBIAN_RUNTIME_DEBUG=false

# Enabled by adding the --force flag.
declare HASSBIAN_RUNTIME_FORCE=false

# Enabled by adding the --force flag.
declare HASSBIAN_RUNTIME_BETA=false

# Enabled by adding the --force flag.
declare HASSBIAN_RUNTIME_DEV=false

#####################################
#  Echoable messages
#####################################

# Warn users about running helper scripts directly.
readonly ECHO_HELPER_WARNING="hassbian-config helper script. Do not run directly, use 'hassbian-config' instead."
readonly ECHO_ACTION_ERROR="If you have issues with this script, please say something in the #hassbian channel on Discord."

#####################################
# Source links (alphabetical order)
#####################################
source /opt/hassbian/info/general
source /opt/hassbian/info/version
source /opt/hassbian/suite/action
source /opt/hassbian/suite/helper
source /opt/hassbian/suite/isntall
source /opt/hassbian/suite/remove
source /opt/hassbian/suite/upgrade
source /opt/hassbian/suite/verify
source /opt/hassbian/cli
source /opt/hassbian/globals
source /opt/hassbian/input
source /opt/hassbian/log


#############################OLD SHIT##########################################

function install-suite { #This function do checks if we can/want to install.
  INSTALL=$(grep "$1"-install-package "$SUITE_INSTALL_DIR/$1".sh) #Checking if suite has install function.
  SUITESTATE=$(if [ -f "$SUITE_CONTROL_DIR/$1" ]; then grep "SCRIPTSTATE" "$SUITE_CONTROL_DIR/$1" | awk -F'=' '{print $2}'; else echo ""; fi) #Checking current suite state.
  if [ "$FORCE" == "true" ]; then #Go straight to run-suite if --force is used.
    run-suite install "$1" | tee "$LOGFILE" #Run if -F/-f/--force is used.
  elif [ "$SUITESTATE" == "installed" ] || [ "$INSTALL" == "" ]; then #Try redirect to upgrade script if already installed.
    printf "%s is already installed or install script is not available...\\n" "$1"
    UPGRADE=$(grep "$1"-upgrade-package "$SUITE_INSTALL_DIR/$1".sh)
    if [ "$UPGRADE" == "" ]; then
      printf "Upgrade script is not available...\\n\\nYou can force run the install script like this:\\nsudo hassbian-config install %s --force\\n" "$1"
      return 0
    fi
    printf "upgrade script for %s found, running that...\\n\\n" "$1"
    run-suite upgrade "$1" | tee "$LOGFILE" #Redirects to upgrade script.
  else
    run-suite install "$1" | tee "$LOGFILE" #This is the default run, if no options is used.
  fi
  return 0
}

function upgrade-suite { #This function do checks if we can upgrade.
  UPGRADE=$(grep "$1"-upgrade-package "$SUITE_INSTALL_DIR/$1".sh) #Checking if suite has upgrade function.
  if [ "$UPGRADE" == "" ]; then
    printf "Upgrade script is not available...\\n\\nYou can force run the install script like this:\\nsudo hassbian-config install %s --force\\n" "$1"
    return 0
  fi
  run-suite upgrade "$1" | tee "$LOGFILE" #This is the default run.
  return 0
}

function remove-suite { #This function do checks if we can remove.
  REMOVABLE=$(grep "$1"-remove-package "$SUITE_INSTALL_DIR/$1".sh) #Checking if suite has remove function.
  if [ "$REMOVABLE" == "" ]; then
    printf "Remove function not avaialable for this suite.\\n"
    return 0
  fi
  run-suite remove "$1" | tee "$LOGFILE" #This is the default run.
  return 0
}
