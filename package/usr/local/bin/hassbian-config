#!/bin/bash
LOGFILE=/tmp/hassbian.log
SUITE_INSTALL_DIR=/opt/hassbian/suites
SUITE_CONTROL_DIR=/srv/homeassistant/hassbian/control

function usage {
   echo hassbian-config usage:
   echo
   echo hassbian-config \<command\> \<suite\>
   echo where \<command\> is one of:
   echo     install   - installs a software suite
   echo     upgrade   - upgrades a software suite
   echo     show      - shows software suites available
   echo     log       - displays an log of the last operation
   echo     share-log - generates an hastebin link of the last operation
   echo and \<suite\> is the name of a software component to operate on.
   echo
}

function show-suite-info {
   source $SUITE_INSTALL_DIR/*_$1.sh
   $1-show-short-info
}

function get-all-suite-installers {
   echo $(find $SUITE_INSTALL_DIR/ -maxdepth 1 -type f -name 'install_*' | grep -v 'install_homeassistant.sh' | awk -F'/|_' ' {print $NF}' | awk -F. '{print $1}')
}

function get-all-suite-upgrades {
   echo $(find $SUITE_INSTALL_DIR/ -maxdepth 1 -type f -name 'upgrade*' | awk -F'/|_' ' {print $NF}' | awk -F. '{print $1}')
}

function show-suites {
	echo -e "Install scripts: (Usage 'sudo hassbian-config install \e[32msuite-name\e[0m')"
	installers=$(get-all-suite-installers)
	for i in $installers
	do
    if [ ! -f $SUITE_CONTROL_DIR/$i ]; then
      SUITESTATE=""
    else
      SUITESTATE=$(cat $SUITE_CONTROL_DIR/$i | grep SCRIPTSTATE | awk -F'=' '{printf $2}')
      SUITESTATE=$(printf "\e[34m $SUITESTATE%-7s")
    fi
	  printf "\e[32m%-20s\e[0m %s\n" "$i$SUITESTATE" "$(show-suite-info $i)"
	done

	echo -e ""
	echo -e "Upgrade scripts: (Usage 'sudo hassbian-config upgrade \e[32msuite-name\e[0m')"
	upgrades=$(get-all-suite-upgrades)
	for i in $upgrades
	do
	  printf "\e[32m%-20s\e[0m %s\n" "$i" "$(show-suite-info $i)"
	done
    echo
    echo -e "To view more info about a suite type: 'hassbian-config show \e[32msuite-name\e[0m'"
}

function show-suite-long-info {
   # Shows long info for the suite.
   source $SUITE_INSTALL_DIR/*_$1.sh
   $1-show-short-info
   $1-show-long-info
   $1-show-copyright-info
}

function check-permission {
   if (( $EUID != 0 ))
   then
      echo "Error: hassbian-config must be run as root (with sudo) for this to be possible"
      exit 1
   fi
}

function share-log {
    echo "This will put the output from your last operation on hastebin."
    echo "This could include sensitive informastion."
    echo "If you are unsure about what it contains, you can rin 'hassbian-config log' to check."
    read -p "Do you want to crate an hastebin link? [N/y] : " RESPONCE
    if [ "$RESPONCE" == "y" ] || [ "$RESPONCE" == "Y" ]; then
    echo ""
    a=$(cat $LOGFILE); curl -X POST -s -d "$a" https://hastebin.com/documents | awk -F '"' '{print "https://hastebin.com/"$4}'
    exit 1
    fi
    exit 1
}

function install-suite {
  if [ ! -f $SUITE_CONTROL_DIR/$1 ]; then
    touch $SUITE_CONTROL_DIR/$1
    echo "SCRIPTSTATE=uninstalled" > $SUITE_CONTROL_DIR/$1
  fi
  SUITESTATE=$(cat $SUITE_CONTROL_DIR/$1 | grep SCRIPTSTATE | awk -F'=' '{print $2}')
  if [ "$SUITESTATE" == "installed" ]; then
    echo "$1 is already installed..."
    echo -n "Do you want to proceed? [y/N]"
    read response
    if [ "$response" == "y" ] || [ "$response" == "Y" ]; then
      source $SUITE_INSTALL_DIR/install_$1.sh
      $1-install-package
      sed -i -- 's/SCRIPTSTATE='$SUITESTATE'/SCRIPTSTATE=installed/g' $SUITE_CONTROL_DIR/$1
    else
      echo "This installer will now exit..."
      return 0
    fi
  else
    source $SUITE_INSTALL_DIR/install_$1.sh
    $1-install-package
    sed -i -- 's/SCRIPTSTATE='$SUITESTATE'/SCRIPTSTATE=installed/g' $SUITE_CONTROL_DIR/$1
  fi
  return 0
}

function upgrade-suite {
   # Having got here, the installer script exists; source it, then run the installer function.
   check-permission
   source $SUITE_INSTALL_DIR/upgrade_$1.sh
   $1-upgrade-package
}

function verify-suite {
   # Check that the suite specified actually exists
   if [ -f "$SUITE_INSTALL_DIR/install_$1.sh" ]
   then
      retval=0 # beware - 0 is true in bash.
   elif [ -f "$SUITE_INSTALL_DIR/upgrade_$1.sh" ]
   then
      retval=0
   else
      retval=1
   fi
   return $retval
}

function show-installed-suites {
  INSTALLERS=$(find $SUITE_CONTROL_DIR/ -maxdepth 1 -type f | awk -F'/|_' ' {print $NF}' | grep -v 'homeassistant' | awk -F. '{print $1}')
  for i in $INSTALLERS
  do
  STATE=$(cat $SUITE_CONTROL_DIR/$i | grep SCRIPTSTATE=installed | awk -F'=' '{print $2}')
  if [ "$STATE" != "" ]; then
  echo "$i:" $STATE
  fi
  done
  return 0
}

if [ $# -lt 1 ]
then
   usage
   exit
fi
COMMAND=$1
SUITE=$2


case $COMMAND in
"show")
   if [ "$SUITE" != "" ]
   then
      if verify-suite $SUITE
      then
         show-suite-long-info $SUITE
      else
         echo "suite $SUITE doesn't exist."
      fi
   else
      show-suites
   fi
   ;;
"install")
   if verify-suite $SUITE
   then
      install-suite $SUITE | tee $LOGFILE
   else
      echo "suite $SUITE doesn't exist."
   fi
   exit
   ;;
"info")
   if verify-suite $SUITE
   then
      info-suite $SUITE
   else
      echo "suite $SUITE doesn't exist."
   fi
   ;;
"upgrade")
   if verify-suite $SUITE
   then
      upgrade-suite $SUITE | tee $LOGFILE
   else
      echo "suite $SUITE doesn't exist."
   fi
   exit
   ;;
"state")
   get-suite-state-info $SUITE
   exit
   ;;
"log")
   more $LOGFILE
   exit
   ;;
"share-log")
   share-log
   exit
   ;;
"-V")
  dpkg -s hassbian-scripts | grep 'Version:' | awk '{print $2}'
  exit
  ;;
"show-installed")
   show-installed-suites
   exit
   ;;
*)
   usage
   ;;
esac
