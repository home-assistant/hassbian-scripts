#!bin/bash
#  Helper script for hassbian-config.

declare author
declare suitename
declare suitestate
declare suiteaction
declare name
declare long_description
declare retrunedvalue

function hassbian.suite.action {
  # Purpose: Check if a suite exist.
  # Return 0 if found, else 1.

  suiteaction="$1"
  suitename="$2"

  # Root check.
  hassbian.info.general.rootcheck

  # Verify that the suite exist.
  hassbian.suite.helper.exist "$suitename"

  # Generate systeminfo
  hassbian.info.general.systeminfo

  # Echo metadata
  hassbian.suite.info.print "$suitename"

  # Do checks to see if the suite can be run.
  hassbian.suite.helper.blockcheck "$suitename"
  hassbian.suite.helper.pizerocheck "$suitename"

  # Activate debug
  if [ "$HASSBIAN_RUNTIME_DEBUG" = true ]; then set -x; fi


  if [ "$suiteaction" == "install" ]; then
    hassbian.suite.install "$suitename" | tee "$HASSBIAN_LOG_FILE"
    retrunedvalue="$?"

  elif [ "$suiteaction" == "upgrade" ]; then
    hassbian.suite.upgrade "$suitename" | tee "$HASSBIAN_LOG_FILE"
    retrunedvalue="$?"

  elif [ "$suiteaction" == "remove" ]; then
    hassbian.suite.remove "$suitename" | tee "$HASSBIAN_LOG_FILE"
    retrunedvalue="$?"

  elif [ "$suiteaction" == "show" ]; then
    hassbian.suite.info.print "$suitename"

  else
    echo "$suiteaction is not a valid suite action."
    exit 1
  fi


  # Deactivate debug
  if [ "$HASSBIAN_RUNTIME_DEBUG" == true ]; then set -x; fi

  # Post action
  if [ "$retrunedvalue" == "0" ]; then
    suitestate="installed"
  else
    echo "$ECHO_ACTION_ERROR"
    suitestate="failed"
  fi

  if [ "$suiteaction" == "remove" ]; then 
    rm "$HASSBIAN_CONTROL_DIR/$suitename"
  else
    echo "SCRIPTSTATE=$suitestate" > "$HASSBIAN_CONTROL_DIR/$suitename"
  fi
}

[[ "$_" == "$0" ]] && echo "$ECHO_HELPER_WARNING"